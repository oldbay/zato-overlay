--- oauth/oauth.py.orig	2014-01-09 21:31:44.949343929 +0100
+++ oauth/oauth.py	2014-01-09 21:31:58.561411427 +0100
@@ -222,17 +222,27 @@
         """Return a string that contains the parameters that must be signed."""
         params = self.parameters
         try:
-            # Exclude the signature if it exists.
+            # exclude the signature if it exists
             del params['oauth_signature']
-        except:
+        except KeyError:
             pass
-        # Escape key values before sorting.
-        key_values = [(escape(_utf8_str(k)), escape(_utf8_str(v))) \
-            for k,v in params.items()]
-        # Sort lexicographically, first after key, then after value.
+        key_values = params.items()
+        # sort keys first
         key_values.sort()
-        # Combine key value pairs into a string.
-        return '&'.join(['%s=%s' % (k, v) for k, v in key_values])
+        # combine key value pairs in string and escape
+        sorted_params = []
+        for key, value in key_values:
+            if not isinstance(value, list):
+                value = [value]
+            # sort values for the same key
+            value.sort()
+            for value_item in value:
+                sorted_params.append(
+                    "%s=%s" % (escape(str(key)),
+                               escape(str(value_item)))
+                )
+
+        return '&'.join(sorted_params)

     def get_normalized_http_method(self):
         """Uppercases the http method."""
@@ -362,7 +372,7 @@
         """Turn URL string into parameters."""
         parameters = cgi.parse_qs(param_str, keep_blank_values=False)
         for k, v in parameters.iteritems():
-            parameters[k] = urllib.unquote(v[0])
+            parameters[k] = [urllib.unquote(elem) for elem in v]
         return parameters
     _split_url_string = staticmethod(_split_url_string)
 
@@ -423,13 +433,21 @@
         new_token = self.data_store.fetch_access_token(consumer, token, verifier)
         return new_token
 
-    def verify_request(self, oauth_request):
+    def verify_request(self, oauth_request, allow_missing_oauth_token=True):
         """Verifies an api call and checks all the parameters."""
         # -> consumer and token
         version = self._get_version(oauth_request)
         consumer = self._get_consumer(oauth_request)
+
         # Get the access token.
-        token = self._get_token(oauth_request, 'access')
+        try:
+            token = self._get_token(oauth_request, 'access')
+        except OAuthError, e:
+            if e.message == 'Parameter not found: oauth_token' and allow_missing_oauth_token:
+                token = ''
+            else:
+                raise
+
         self._check_signature(oauth_request, consumer, token)
         parameters = oauth_request.get_nonoauth_parameters()
         return consumer, token, parameters
@@ -625,6 +643,9 @@
         key, raw = self.build_signature_base_string(oauth_request, consumer,
             token)
 
+        key = key.encode('utf-8')
+        raw = raw.encode('utf-8')
+
         # HMAC object.
         try:
             import hashlib # 2.5
