--- requests/packages/urllib3/connectionpool.py.orig	2015-08-21 00:21:08.620310276 +0200
+++ requests/packages/urllib3/connectionpool.py	2015-08-21 00:22:47.780311879 +0200
@@ -236,11 +236,16 @@
         # If this is a persistent connection, check if it got disconnected
         if conn and is_connection_dropped(conn):
             log.info("Resetting dropped connection: %s" % self.host)
-            conn.close()
-            if getattr(conn, 'auto_open', 1) == 0:
-                # This is a proxied connection that has been mutated by
-                # httplib._tunnel() and cannot be reused (since it would
-                # attempt to bypass the proxy)
+
+            try:
+                conn.close()
+                if getattr(conn, 'auto_open', 1) == 0:
+                    # This is a proxied connection that has been mutated by
+                    # httplib._tunnel() and cannot be reused (since it would
+                    # attempt to bypass the proxy)
+                    conn = None
+            except Exception, e:
+                log.info("Closing connection failed: %s, force new connection" % str(e))
                 conn = None
 
         return conn or self._new_conn()
@@ -308,12 +313,6 @@
         if hasattr(err, 'errno') and err.errno in _blocking_errnos:
             raise ReadTimeoutError(self, url, "Read timed out. (read timeout=%s)" % timeout_value)
 
-        # Catch possible read timeouts thrown as SSL errors. If not the
-        # case, rethrow the original. We need to do this because of:
-        # http://bugs.python.org/issue10272
-        if 'timed out' in str(err) or 'did not complete (read)' in str(err):  # Python 2.6
-            raise ReadTimeoutError(self, url, "Read timed out. (read timeout=%s)" % timeout_value)
-
     def _make_request(self, conn, method, url, timeout=_Default,
                       **httplib_request_kw):
         """
