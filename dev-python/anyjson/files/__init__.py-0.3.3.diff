--- anyjson/__init__.py.orig 2013-02-27 12:00:02.448807484 +0100
+++ anyjson/__init__.py	2013-02-27 11:32:27.000000000 +0100
@@ -80,23 +80,23 @@
         __import__(modname)
         return sys.modules[modname]
 
-    def dumps(self, data):
+    def dumps(self, data, *args, **kwargs):
         """Serialize the datastructure to json. Returns a string. Raises
         TypeError if the object could not be serialized."""
         try:
-            return self._encode(data)
+            return self._encode(data, *args, **kwargs)
         except self._encode_error, exc:
             raise TypeError, TypeError(*exc.args), sys.exc_info()[2]
     serialize = dumps
 
-    def loads(self, s):
+    def loads(self, s, *args, **kwargs):
         """deserialize the string to python data types. Raises
         ValueError if the string could not be parsed."""
         # uses StringIO to support buffer objects.
         try:
             if self._filedecode and not isinstance(s, basestring):
-                return self._filedecode(StringIO(s))
-            return self._decode(s)
+                return self._filedecode(StringIO(s), *args, **kwargs)
+            return self._decode(s, *args, **kwargs)
         except self._decode_error, exc:
             raise ValueError, ValueError(*exc.args), sys.exc_info()[2]
     deserialize = loads
@@ -130,13 +130,13 @@
         raise ImportError("No supported JSON module found")
 
 
-    def loads(value):
+    def loads(value, *args, **kwargs):
         """Serialize the object to JSON."""
-        return implementation.loads(value)
+        return implementation.loads(value, *args, **kwargs)
     deserialize = loads   # compat
 
 
-    def dumps(value):
+    def dumps(value, *args, **kwargs):
         """Deserialize JSON-encoded object to a Python object."""
-        return implementation.dumps(value)
+        return implementation.dumps(value, *args, **kwargs)
     serialize = dumps
